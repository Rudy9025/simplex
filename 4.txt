Thanks for the details and the images. Based on your requirements, here's how we can enhance your `UserLogsService` to handle all **three cases** for logging user activity, **only when logged in**.

---

### âœ… Assumptions

* You have a backend API at: `http://localhost:8080/api/userLogs` expecting a payload like:

```json
{
  "uid": "someUser",
  "timeOn": "2025-05-31T15:34:00.000Z",
  "timeOff": "2025-05-31T15:40:00.000Z",
  "appStatus": "active" | "App/ok" | "Recollect/ok"
}
```

---

### âœ… Step-by-step Implementation

#### 1. Update `UserLogsService`

```ts
// userlogs.service.ts
import { Injectable, HostListener } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';

@Injectable({ providedIn: 'root' })
export class UserLogsService {
  private apiUrl = 'http://localhost:8080/api/userLogs';
  private uid!: string;
  private timeOn!: Date;
  private timeOff!: Date;
  private appStatus!: string;

  constructor(private http: HttpClient, private router: Router) {}

  private getUid(): string {
    return localStorage.getItem('uid') || '';
  }

  private isLoggedIn(): boolean {
    return !!this.getUid();
  }

  private sendLog(): void {
    if (this.uid && this.timeOn && this.timeOff && this.appStatus) {
      this.http.post(this.apiUrl, {
        uid: this.uid,
        timeOn: this.timeOn,
        timeOff: this.timeOff,
        appStatus: this.appStatus
      }).subscribe({
        next: () => console.log('User log sent'),
        error: (err) => console.error('Log send failed', err)
      });
    }
  }

  // ðŸš€ Case 1: On Login
  trackLogin(): void {
    if (!this.isLoggedIn()) return;

    this.uid = this.getUid();
    this.timeOn = new Date();
    this.timeOff = this.timeOn;
    this.appStatus = 'active';

    this.sendLog();
  }

  // ðŸš€ Case 2: Manual Logout
  trackLogout(): void {
    if (!this.isLoggedIn()) return;

    this.uid = this.getUid();
    this.timeOff = new Date();
    this.appStatus = 'App/ok';

    this.sendLog();
  }

  // ðŸš€ Case 3: On Blur or Tab Switch
  trackAway(): void {
    if (!this.isLoggedIn()) return;

    this.uid = this.getUid();
    this.timeOff = new Date();
    this.appStatus = 'Recollect/ok';

    this.sendLog();
  }
}
```

---

#### 2. Call `trackLogin()` after login success

In your `login.component.ts`, add this:

```ts
onSubmit() {
  if (this.uid && this.role) {
    localStorage.setItem('uid', this.uid);
    this.userLogsService.trackLogin(); // âœ… Track login
    this.router.navigateByUrl('/Manage-Company');
  } else {
    alert('Please fill in all fields.');
  }
}
```

---

#### 3. Call `trackLogout()` in logout function

In your `header.component.ts`:

```ts
logout(): void {
  this.userLogsService.trackLogout(); // âœ… Track logout
  localStorage.removeItem('uid');
  this.router.navigate(['/']);
}
```

---

#### 4. Detect tab change / minimize (Case 3)

In `header.component.ts` (or a central component like `AppComponent`):

```ts
ngOnInit() {
  window.addEventListener('blur', () => this.userLogsService.trackAway());
}
```

If you'd rather do it in `AppComponent` globally, that's ideal for blur handling.

---

### âœ… Final Notes

* All log entries are only sent if `uid`, `timeOn`, `timeOff`, and `appStatus` are present.
* You can further protect against accidental logging by checking for `uid` and page context (not on login page).
* You can also debounce `blur` to avoid spamming if user switches frequently â€” let me know if you want that.

Would you like me to provide the full working example across all files?
